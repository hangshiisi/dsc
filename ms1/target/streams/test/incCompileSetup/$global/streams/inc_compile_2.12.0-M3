format version: 5
output mode:
1 items
0 -> single
output directories:
1 items
output dir -> /home/hs/SC/dsc/hello/target/scala-2.12.0-M3/test-classes
compile options:
0 items
javac options:
0 items
compiler version:
1 items
0 -> 2.12.0-M3
compile order:
1 items
0 -> Mixed
name hashing:
1 items
0 -> true
products:
3 items
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> /home/hs/SC/dsc/hello/target/scala-2.12.0-M3/test-classes/ExampleSpec.class
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> /home/hs/SC/dsc/hello/target/scala-2.12.0-M3/test-classes/StackSpec.class
/home/hs/SC/dsc/hello/src/test/scala/UnitSpec.scala -> /home/hs/SC/dsc/hello/target/scala-2.12.0-M3/test-classes/UnitSpec.class
binary dependencies:
7 items
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> /home/hs/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.0-M3.jar
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> /home/hs/.ivy2/cache/org.scalatest/scalatest_2.11/bundles/scalatest_2.11-2.2.3.jar
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> /usr/lib/jvm/java-8-oracle/jre/lib/rt.jar
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> /home/hs/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.0-M3.jar
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> /home/hs/.ivy2/cache/org.scalatest/scalatest_2.11/bundles/scalatest_2.11-2.2.3.jar
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> /usr/lib/jvm/java-8-oracle/jre/lib/rt.jar
/home/hs/SC/dsc/hello/src/test/scala/UnitSpec.scala -> /home/hs/.ivy2/cache/org.scalatest/scalatest_2.11/bundles/scalatest_2.11-2.2.3.jar
direct source dependencies:
0 items
direct external dependencies:
0 items
public inherited source dependencies:
0 items
public inherited external dependencies:
0 items
member reference internal dependencies:
0 items
member reference external dependencies:
0 items
inheritance internal dependencies:
0 items
inheritance external dependencies:
0 items
class names:
3 items
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> ExampleSpec
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> StackSpec
/home/hs/SC/dsc/hello/src/test/scala/UnitSpec.scala -> UnitSpec
used names:
81 items
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> <init>
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> ExampleSpec
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> FlatSpec
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> Int
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> ManifestFactory
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> Matchers
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> NoSuchElementException
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> Stack
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> a
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> apply
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> be
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> classType
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> collection
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> convertToAnyShouldWrapper
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> convertToInAndIgnoreMethods
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> convertToStringShouldWrapper
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> emptyStack
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> in
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> it
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> mutable
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> org
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> package
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> pop
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> push
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> reflect
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> scala
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> scalatest
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> shorthandTestRegistrationFunction
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> should
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> stack
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> thrownBy
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> $org_scalatest_assert_macro_expr
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> $org_scalatest_assert_macro_left
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> $org_scalatest_assert_macro_right
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> <init>
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> ===
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> Bool
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> Equality
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> FlatSpec
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> Int
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> ManifestFactory
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> NoSuchElementException
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> Predef
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> Stack
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> StackSpec
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> String
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> assert
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> assertionsHelper
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> binaryMacroBool
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> classType
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> collection
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> convertToEqualizer
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> convertToInAndIgnoreMethods
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> convertToStringShouldWrapper
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> default
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> emptyStack
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> in
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> intercept
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> it
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> macroAssert
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> mutable
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> org
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> package
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> pop
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> push
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> reflect
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> scala
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> scalactic
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> scalatest
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> shorthandTestRegistrationFunction
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> should
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> stack
/home/hs/SC/dsc/hello/src/test/scala/UnitSpec.scala -> <init>
/home/hs/SC/dsc/hello/src/test/scala/UnitSpec.scala -> FlatSpec
/home/hs/SC/dsc/hello/src/test/scala/UnitSpec.scala -> Inside
/home/hs/SC/dsc/hello/src/test/scala/UnitSpec.scala -> Inspectors
/home/hs/SC/dsc/hello/src/test/scala/UnitSpec.scala -> Matchers
/home/hs/SC/dsc/hello/src/test/scala/UnitSpec.scala -> OptionValues
/home/hs/SC/dsc/hello/src/test/scala/UnitSpec.scala -> UnitSpec
/home/hs/SC/dsc/hello/src/test/scala/UnitSpec.scala -> org
/home/hs/SC/dsc/hello/src/test/scala/UnitSpec.scala -> scalatest
product stamps:
3 items
/home/hs/SC/dsc/hello/target/scala-2.12.0-M3/test-classes/ExampleSpec.class -> lastModified(1447375579000)
/home/hs/SC/dsc/hello/target/scala-2.12.0-M3/test-classes/StackSpec.class -> lastModified(1447375579000)
/home/hs/SC/dsc/hello/target/scala-2.12.0-M3/test-classes/UnitSpec.class -> lastModified(1447375579000)
source stamps:
3 items
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> hash(78a0774e17f585eda214e2381b97cc9339c6859f)
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> hash(655dd96cd8829cc9040b68f183434708facf183f)
/home/hs/SC/dsc/hello/src/test/scala/UnitSpec.scala -> hash(e99cf24a7ba05612ec09743a8585e2fb53c7dc33)
binary stamps:
3 items
/home/hs/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.0-M3.jar -> lastModified(1444398502000)
/home/hs/.ivy2/cache/org.scalatest/scalatest_2.11/bundles/scalatest_2.11-2.2.3.jar -> lastModified(1418869691000)
/usr/lib/jvm/java-8-oracle/jre/lib/rt.jar -> lastModified(1446851956000)
class names:
3 items
/home/hs/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.0-M3.jar -> scala.Int
/home/hs/.ivy2/cache/org.scalatest/scalatest_2.11/bundles/scalatest_2.11-2.2.3.jar -> org.scalatest.Inspectors
/usr/lib/jvm/java-8-oracle/jre/lib/rt.jar -> java.lang.String
internal apis:
3 items
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> 

/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> 

/home/hs/SC/dsc/hello/src/test/scala/UnitSpec.scala -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlFlpwRASfbtoCAAZJAAdhcGlIYXNoWgAIaGFzTWFjcm9MABhfaW50ZXJuYWxPbmx5X25hbWVIYXNoZXN0ACRMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2hlcztMAANhcGl0ABVMeHNidGkvYXBpL1NvdXJjZUFQSTtMAAtjb21waWxhdGlvbnQAF0x4c2J0aS9hcGkvQ29tcGlsYXRpb247WwAEaGFzaHQAAltCeHB+8enIAHNyACJ4c2J0aS5hcGkuX2ludGVybmFsT25seV9OYW1lSGFzaGVzVNq+mfrU7EwCAAJbAA9pbXBsaWNpdE1lbWJlcnN0ACNbTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoO1sADnJlZ3VsYXJNZW1iZXJzcQB+AAd4cHVyACNbTHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoO0lagLbdlov0AgAAeHAAAAAOc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwphKJA3QAGmNvbnZlcnRUb1N0cmluZ011c3RXcmFwcGVyc3EAfgALzMjUG3QAGWNvbnZlcnRUb1N0cmluZ0NhbldyYXBwZXJzcQB+AAvsef3bdAAZY29udmVydFRvQW55U2hvdWxkV3JhcHBlcnNxAH4AC3+gjE90ACJjb252ZXJ0TnVtZXJpY1RvUGx1c09yTWludXNXcmFwcGVyc3EAfgALi+xFN3QAEmNvbnZlcnRUb0VxdWFsaXplcnNxAH4ACywihlB0AChjb252ZXJ0VG9JbkFuZElnbm9yZU1ldGhvZHNBZnRlclRhZ2dlZEFzc3EAfgALjHPb6nQAJ3Nob3J0aGFuZFNoYXJlZFRlc3RSZWdpc3RyYXRpb25GdW5jdGlvbnNxAH4ACxM2Bol0ABdjb252ZXJ0T3B0aW9uVG9WYWx1YWJsZXNxAH4AC1G1Pal0ABVjb252ZXJ0VG9SZWdleFdyYXBwZXJzcQB+AAtFUHkJdAAVdW5jb25zdHJhaW5lZEVxdWFsaXR5c3EAfgALbEhjD3QAG2NvbnZlcnRUb0luQW5kSWdub3JlTWV0aG9kc3NxAH4AC47q5nV0ABxjb252ZXJ0VG9TdHJpbmdTaG91bGRXcmFwcGVyc3EAfgALariMr3QAK2NvbnZlcnRTeW1ib2xUb0hhdmVQcm9wZXJ0eU1hdGNoZXJHZW5lcmF0b3JzcQB+AAuCrI7rdAAhc2hvcnRoYW5kVGVzdFJlZ2lzdHJhdGlvbkZ1bmN0aW9udXEAfgAJAAAA+HNxAH4AC0TlIet0AAtpbk9yZGVyT25seXNxAH4AC+RUQUp0AAZhc3NlcnRzcQB+AAtO27CXdAAeUmVzdWx0T2ZTdGFydFdpdGhXb3JkRm9yU3RyaW5nc3EAfgALnlglaXQAElBsdXNPck1pbnVzV3JhcHBlcnNxAH4AC93cnd50AAhVbml0U3BlY3NxAH4ACyXK5qJ0AAZub3RpZnlzcQB+AAtlYPXFdAAmbG93UHJpb3JpdHlDb252ZXJzaW9uQ2hlY2tlZENvbnN0cmFpbnRzcQB+AAvnLFrLdAAJc2hvdWxkTm90c3EAfgAL9GQXtHQABXJlZ2V4c3EAfgALKgrZlXQABkFuV29yZHNxAH4ACwzuD5J0AApmb3JFeGFjdGx5c3EAfgALEqyfqHQAB3Byb2R1Y2VzcQB+AAsagDQGdAAQQXNzZXJ0aW9uc0hlbHBlcnNxAH4AC2KjncZ0AAZjYW5jZWxzcQB+AAvuKE79dAARZXhlY3V0ZSRkZWZhdWx0JDJzcQB+AAv6dP7udAAMZXhwZWN0UmVzdWx0c3EAfgALz+Xof3QACWludGVyY2VwdHNxAH4AC9Tfd4x0AARmYWlsc3EAfgAL+kpWF3QAFEl0VmVyYlN0cmluZ1RhZ2dlZEFzc3EAfgALjDAQunQABG5hbWVzcQB+AAt7AFzNdAAKZm9yQmV0d2VlbnNxAH4AC0+GrS10AAJpbnNxAH4AC7Mx40R0ABxIYXZlUHJvcGVydHlNYXRjaGVyR2VuZXJhdG9yc3EAfgALMbkJKHQABUFXb3Jkc3EAfgAL7Hg2WXQABGhhdmVzcQB+AAta2lY6dAAUYXNzZXJ0RG9lc05vdENvbXBpbGVzcQB+AAvJWN8adAARZXhlY3V0ZSRkZWZhdWx0JDRzcQB+AAuGNZowdAAiUmVzdWx0T2ZDb250YWluV29yZEZvckNvbGxlY3RlZEFueXNxAH4AC35tg9N0AAJpc3NxAH4AC7yx0CJ0AAdleGVjdXRlc3EAfgAL4k365nQABHdhaXRzcQB+AAsiF9SYdAAORGV0ZXJtaW5lZFdvcmRzcQB+AAsbNKm2dAALdGVzdERhdGFGb3JzcQB+AAslaHo1dAATY3JlYXRlQ2F0Y2hSZXBvcnRlcnNxAH4AC4YONMN0AAI8PXNxAH4AC+ThmZ50AAlzdHlsZU5hbWVzcQB+AAs6tuWddAANbGVmdFNpZGVWYWx1ZXNxAH4AC1+6eSZ0AA0kYXNJbnN0YW5jZU9mc3EAfgALjGE0i3QABWVtcHR5c3EAfgALra9JHXQACXN0YXJ0V2l0aHNxAH4AC7Ib8Ld0AARzaXplc3EAfgALdtycxnQAEWV4ZWN1dGUkZGVmYXVsdCQzc3EAfgAL1QRw+nQABWNsYXp6c3EAfgAL1uVrKnQAFFJlc3VsdE9mQ29sbGVjdGVkQW55c3EAfgALvfd8y3QABWV4aXN0c3EAfgALxw93RXQACWZvckF0TW9zdHNxAH4ACxj4oA10AAljb25maWdNYXBzcQB+AAu0yj0idAAKZm9yQXRMZWFzdHNxAH4AC/24FAJ0AAlWYWx1ZVdvcmRzcQB+AAumESzDdAALZGlmZlN0cmluZ3NzcQB+AAtBAWZNdAAGZXF1YWxzc3EAfgALYs89onQADGF0TGVhc3RPbmVPZnNxAH4ACw1qDxJ0AAdhdExlYXN0c3EAfgALIzsDDnQACHRocm93bkJ5c3EAfgALHHzfo3QAGVJlc3VsdE9mUHJvZHVjZUludm9jYXRpb25zcQB+AAsi4LJkdAAsY29udmVydEVxdWl2YWxlbmNlVG9BVG9CQ29udmVyc2lvbkNvbnN0cmFpbnRzcQB+AAv2iEbYdAAPZGVmYXVsdEVxdWFsaXR5c3EAfgALXqv39XQAImNvbnZlcnRFcXVpdmFsZW5jZVRvQVRvQkNvbnN0cmFpbnRzcQB+AAubz2KDdAAcUmVzdWx0T2ZFbmRXaXRoV29yZEZvclN0cmluZ3NxAH4AC94BxSp0AARtdXN0c3EAfgALmTNeanQAA2FsbHNxAH4AC6PqKCB0AAR0YWdzc3EAfgAL8BtUCnQADGFzSW5zdGFuY2VPZnNxAH4AC5ezVgZ0AAE8c3EAfgALkicsNnQABWFsZXJ0c3EAfgAL3PoiMHQAB2luT3JkZXJzcQB+AAsk1DoRdAADcnVuc3EAfgALvJ0r0XQAEURlY2lkZWRCeUVxdWFsaXR5c3EAfgALyM0qcXQABWV2ZXJ5c3EAfgALRt7LW3QAD0xlZ2FjeUVxdWFsaXplcnNxAH4AC0DWjGR0AAZzY29wZXNzcQB+AAtGQrvgdAAYY29udmVydFRvTGVnYWN5RXF1YWxpemVyc3EAfgALXbSZdXQACndpdGhHcm91cHNzcQB+AAv+ogrbdAAMc3luY2hyb25pemVkc3EAfgALt0c2RnQABGxlZnRzcQB+AAuH6LrDdAACaXRzcQB+AAtDt7x4dAAKZXZhbHVhdGluZ3NxAH4AC3SNAXp0AAdLZXlXb3Jkc3EAfgAL5RRWyXQAEXRoZVNhbWVFbGVtZW50c0Fzc3EAfgALCx1Y1XQADmFzc2VydENvbXBpbGVzc3EAfgALX87X1HQAFGNoZWNrUmVnZXgkZGVmYXVsdCQyc3EAfgALscwSx3QACmRldGVybWluZWRzcQB+AAv/JayAdAABYXNxAH4AC3TfVMp0AA5sZWZ0U2lkZVN0cmluZ3NxAH4AC2FDBEV0AA0kaXNJbnN0YW5jZU9mc3EAfgALboQmlHQABHRyYXBzcQB+AAvZBpnMdAAVdGVzdERhdGFGb3IkZGVmYXVsdCQyc3EAfgALfmyETXQAEkluQW5kSWdub3JlTWV0aG9kc3NxAH4AC0wjrH50AAxhc3NlcnRSZXN1bHRzcQB+AAsASnKLdAAeUmVzdWx0T2ZOb3RXb3JkRm9yQ29sbGVjdGVkQW55c3EAfgALpQXBYXQAAj49c3EAfgALWpSyVHQAC3BsdXNPck1pbnVzc3EAfgALjk5vD3QAF1N0cmluZ0NhbldyYXBwZXJGb3JWZXJic3EAfgALRlIsiXQABHRleHRzcQB+AAuSv0JHdAAlUmVzdWx0T2ZJbmNsdWRlV29yZEZvckNvbGxlY3RlZFN0cmluZ3NxAH4AC4pQpxN0ACxjb252ZXJ0RXF1aXZhbGVuY2VUb0JUb0FDb252ZXJzaW9uQ29uc3RyYWludHNxAH4AC+Kmu7V0AAdjb250YWluc3EAfgALNfxg73QABHRoZXlzcQB+AAsQf6+EdAAHY29tcGlsZXNxAH4ACyVsr0R0ABFleGVjdXRlJGRlZmF1bHQkN3NxAH4AC+g5Hyp0AAdleGFjdGx5c3EAfgALxmgj2HQAEXRoZVNhbWVJbnN0YW5jZUFzc3EAfgALg4oEt3QACGZvckV2ZXJ5c3EAfgALuRVnNXQAJ1Jlc3VsdE9mU3RhcnRXaXRoV29yZEZvckNvbGxlY3RlZFN0cmluZ3NxAH4AC+rs+Yd0AAtEZWNpZGVkV29yZHNxAH4ACwvafop0ABV0eXBlQ2hlY2tlZENvbnN0cmFpbnRzcQB+AAv+RgfHdAADIT09c3EAfgALFTmS+HQABmF0TW9zdHNxAH4AC2HvAYF0AARpbmZvc3EAfgALMYvJcHQAC25vRXhjZXB0aW9uc3EAfgAL2p3gtXQACW5vdGlmeUFsbHNxAH4AC6UBBb90AAxJdFZlcmJTdHJpbmdzcQB+AAut8u9zdAALd2l0aEZpeHR1cmVzcQB+AAvoPp1zdAAHcnVuVGVzdHNxAH4ACy7BCyV0AB1SZXN1bHRPZkJlV29yZEZvckNvbGxlY3RlZEFueXNxAH4AC95x1yR0AANrZXlzcQB+AAvtb8DedAAMaXNJbnN0YW5jZU9mc3EAfgALzP2KeHQACHdpdGhDbHVlc3EAfgALS64ltXQAEGFzc2VydGlvbnNIZWxwZXJzcQB+AAuNLetMdAARZXhlY3V0ZSRkZWZhdWx0JDZzcQB+AAsqBlEgdAAIVmFsdWFibGVzcQB+AAvsbZsqdAAIdGFnZ2VkQXNzcQB+AAvLEZg6dAAPYXNzZXJ0VHlwZUVycm9yc3EAfgALhXYxXXQAJVJlc3VsdE9mRW5kV2l0aFdvcmRGb3JDb2xsZWN0ZWRTdHJpbmdzcQB+AAv3EVqqdAAGbWFya3Vwc3EAfgALppcY43QACGxlZnRTaWRlc3EAfgALgOpd7HQABjxpbml0PnNxAH4ACzzTjaB0AAttYWNyb0Fzc3VtZXNxAH4AC8uBK4x0AA9ydW5OZXN0ZWRTdWl0ZXNzcQB+AAvfapArdAAZUmVzdWx0T2ZIYXZlV29yZEZvckV4dGVudHNxAH4AC6Q3qPJ0AANjYW5zcQB+AAvU0l2ddAAFYmVpbmdzcQB+AAvu54N0dAAFZXF1YWxzcQB+AAsyn9xjdAAGSXRXb3Jkc3EAfgALtD0kR3QACGFyZUVxdWFsc3EAfgAL2aC6EHQABm5vbmVPZnNxAH4ACxGDH8l0AAVhcHBseXNxAH4AC28XIrB0AAl3aXRoR3JvdXBzcQB+AAsqTHlFdAAFYWZ0ZXJzcQB+AAsbx/e4dAAJRXF1YWxpemVyc3EAfgALM4p5wXQACmFmdGVyQmVpbmdzcQB+AAtxSRm2dAAbbmV3QXNzZXJ0aW9uRmFpbGVkRXhjZXB0aW9uc3EAfgAL+bWt+3QABG5vdGVzcQB+AAvbyCE9dAACPT1zcQB+AAtqS1UMdAAfSW5BbmRJZ25vcmVNZXRob2RzQWZ0ZXJUYWdnZWRBc3NxAH4ACyUrVdN0AAJieXNxAH4ACxrATHt0AAZzb3J0ZWRzcQB+AAtGQpevdAAKZnVsbHlNYXRjaHNxAH4AC7O6v2t0AAVjbG9uZXNxAH4AC8B5AlB0AAxCZWhhdmlvcldvcmRzcQB+AAuDoes4dAATU3RyaW5nU2hvdWxkV3JhcHBlcnNxAH4AC+vbckN0AAZleHBlY3RzcQB+AAsVltaIdAAGc2hvdWxkc3EAfgAL2BHXGXQAEEFueVNob3VsZFdyYXBwZXJzcQB+AAuwnImOdAAXRGV0ZXJtaW5lZEJ5RXF1aXZhbGVuY2VzcQB+AAs2Ja7YdAADbm90c3EAfgALt5PKg3QAH1Jlc3VsdE9mQmVXb3JkRm9yQ29sbGVjdGVkQXJyYXlzcQB+AAsK1OJ5dAAJZGVmaW5lZEF0c3EAfgALSwcuRXQADG5lc3RlZFN1aXRlc3NxAH4AC8QKuHl0AANmdW5zcQB+AAv6WJOXdAAGYXNzdW1lc3EAfgALiWI6uHQABiRpbml0JHNxAH4AC9O7fCR0AAdkZWZpbmVkc3EAfgALrJpZvXQAIGxvd1ByaW9yaXR5VHlwZUNoZWNrZWRDb25zdHJhaW50c3EAfgALg3vxbnQABWZvck5vc3EAfgALty4fMnQAB2luY2x1ZGVzcQB+AAtxaOtudAAIVGhleVdvcmRzcQB+AAsStxXOdAAMcmVnaXN0ZXJUZXN0c3EAfgAL40i83XQACXR5cGVDaGVja3NxAH4AC/jAxtN0ABFleGVjdXRlJGRlZmF1bHQkNXNxAH4ACz43qTZ0AAM9PT1zcQB+AAsmclrmdAAYbmV3VGVzdENhbmNlbGVkRXhjZXB0aW9uc3EAfgAL7xkBTXQAB21lc3NhZ2VzcQB+AAubI3qidAAIdG9TdHJpbmdzcQB+AAvyAM/YdAAJdGVzdE5hbWVzc3EAfgAL6MkmAHQAAmFuc3EAfgALMSTHSHQABmxlbmd0aHNxAH4AC0I+lih0ABhTdHJpbmdNdXN0V3JhcHBlckZvclZlcmJzcQB+AAtPJ6OAdAARZXhlY3V0ZSRkZWZhdWx0JDFzcQB+AAuhDTJydAACYmVzcQB+AAsOqERTdAACIT1zcQB+AAtmfxW5dAAiUmVzdWx0T2ZIYXZlV29yZEZvckNvbGxlY3RlZEV4dGVudHNxAH4AC0rSGUx0AB9SZXN1bHRPZkZ1bGx5TWF0Y2hXb3JkRm9yU3RyaW5nc3EAfgALAv37wHQACmNoZWNrUmVnZXhzcQB+AAs7rhnodAAMbWF0Y2hQYXR0ZXJuc3EAfgALw/5JiXQAF0xlZ2FjeUNoZWNraW5nRXF1YWxpemVyc3EAfgALN6xLfHQAGElnbm9yZVZlcmJTdHJpbmdUYWdnZWRBc3NxAH4ACz+YTop0AAhnZXRDbGFzc3NxAH4AC47wFzp0ABNyZWdpc3Rlcklnbm9yZWRUZXN0c3EAfgALubsronQABmJlaGF2ZXNxAH4AC38uXZ10AAhydW5UZXN0c3NxAH4AC37ti+B0AAhiZWhhdmlvcnNxAH4AC0pXVKR0ABFwZW5kaW5nVW50aWxGaXhlZHNxAH4AC/7OMBN0ABh0aGVTYW1lRWxlbWVudHNJbk9yZGVyQXNzcQB+AAsEt4hrdAAXVGhlU2FtZUluc3RhbmNlQXNQaHJhc2VzcQB+AAvq+X0ldAAOVGhleVZlcmJTdHJpbmdzcQB+AAtX04QldAANYXJlRXF1aXZhbGVudHNxAH4AC369ANd0AAdiZXR3ZWVuc3EAfgALfOPDg3QAB2RlY2lkZWRzcQB+AAvgKe9ldAAUUmVzdWx0T2ZCZVdvcmRGb3JBbnlzcQB+AAtJG576dAARZXhwZWN0ZWRUZXN0Q291bnRzcQB+AAsFO/5OdAAHZW5kV2l0aHNxAH4AC9zpjQF0AAhyZXJ1bm5lcnNxAH4ACxjfLQ50AAtzaG91bGRFcXVhbHNxAH4AC4+M/iR0AAlSZWdleFdvcmRzcQB+AAtffAZZdAAMVGhlQWZ0ZXJXb3Jkc3EAfgALRYKNKnQAImNvbnZlcnRFcXVpdmFsZW5jZVRvQlRvQUNvbnN0cmFpbnRzcQB+AAupVYGcdAAFb25lT2ZzcQB+AAvdcJGLdAACbmVzcQB+AAt6e4NPdAAWVGhleVZlcmJTdHJpbmdUYWdnZWRBc3NxAH4AC8MDIM50AAZmb3JBbGxzcQB+AAuQvClydAACbm9zcQB+AAufnXeCdAAoUmVzdWx0T2ZGdWxseU1hdGNoV29yZEZvckNvbGxlY3RlZFN0cmluZ3NxAH4AC6GxQ3t0AAtkb0NvbGxlY3RlZHNxAH4AC/cCRmN0ABFDaGVja2luZ0VxdWFsaXplcnNxAH4AC+xlQ6R0ACBjb252ZXJ0VG9MZWdhY3lDaGVja2luZ0VxdWFsaXplcnNxAH4ACyGLNKx0AAh3cml0YWJsZXNxAH4AC06vjr50AB1SZXN1bHRPZkV2YWx1YXRpbmdBcHBsaWNhdGlvbnNxAH4AC192lpt0AAdwZW5kaW5nc3EAfgALjCHYNHQABXZhbHVlc3EAfgALMMZyWnQABmlnbm9yZXNxAH4AC9+35TJ0AAhzaG91bGRCZXNxAH4AC157x050ABxSZXN1bHRPZkluY2x1ZGVXb3JkRm9yU3RyaW5nc3EAfgALpBQh4nQAEElnbm9yZVZlcmJTdHJpbmdzcQB+AAs2rXEcdAALbWFjcm9Bc3NlcnRzcQB+AAtFW5WSdAAGaW5zaWRlc3EAfgALPc3glnQAAmVxc3EAfgALD5cmu3QAG2dldE9iamVjdHNGb3JGYWlsdXJlTWVzc2FnZXNxAH4AC8jKWXV0ABpjb252ZXJ0VG9DaGVja2luZ0VxdWFsaXplcnNxAH4AC9T/1LN0AAJvZnNxAH4AC5loQwF0AAIrLXNxAH4ACw9fVbp0AAlOb0FyZ1Rlc3RzcQB+AAum5wWRdAAKSWdub3JlV29yZHNxAH4AC4Q2WH90AAE+c3EAfgALrCC4wnQACHJlYWRhYmxlc3EAfgALF5ZHM3QAAiMjc3EAfgALUYch5nQAGlN0cmluZ1Nob3VsZFdyYXBwZXJGb3JWZXJic3EAfgALYkKBCnQACGZpbmFsaXplc3EAfgALSVNexXQAG2NvbnZlcnNpb25DaGVja2VkQ29uc3RyYWludHNxAH4AC1WQ6EF0AAthdE1vc3RPbmVPZnNxAH4ACwxjdCx0AAVhbGxPZnNxAH4ACzXjth10AAhoYXNoQ29kZXNxAH4AC81GuTd0AAdzdWl0ZUlkc3EAfgALQJpF8nQACXN1aXRlTmFtZXNxAH4AC1dogJl0AAxSZWdleFdyYXBwZXJzcQB+AAsMKmvMdAADdGhlc3EAfgALalRVlnQABmFwcGVuZHNxAH4AC3B7VCt0AARvbmx5c3IAE3hzYnRpLmFwaS5Tb3VyY2VBUEm5Xqf5KSM4pAIAAlsAC2RlZmluaXRpb25zdAAXW0x4c2J0aS9hcGkvRGVmaW5pdGlvbjtbAAhwYWNrYWdlc3QAFFtMeHNidGkvYXBpL1BhY2thZ2U7eHB1cgAXW0x4c2J0aS5hcGkuRGVmaW5pdGlvbjuIyVzntONeDgIAAHhwAAAAAXNyABN4c2J0aS5hcGkuQ2xhc3NMaWtlgzQcod+wl2wCAARMAA5kZWZpbml0aW9uVHlwZXQAGkx4c2J0aS9hcGkvRGVmaW5pdGlvblR5cGU7WwAQc2F2ZWRBbm5vdGF0aW9uc3QAE1tMamF2YS9sYW5nL1N0cmluZztMAAhzZWxmVHlwZXQAEEx4c2J0aS9hcGkvTGF6eTtMAAlzdHJ1Y3R1cmVxAH4CI3hyACF4c2J0aS5hcGkuUGFyYW1ldGVyaXplZERlZmluaXRpb275EW6x1VA84gIAAVsADnR5cGVQYXJhbWV0ZXJzdAAaW0x4c2J0aS9hcGkvVHlwZVBhcmFtZXRlcjt4cgAUeHNidGkuYXBpLkRlZmluaXRpb26HKhvocULjRgIABEwABmFjY2Vzc3QAEkx4c2J0aS9hcGkvQWNjZXNzO1sAC2Fubm90YXRpb25zdAAXW0x4c2J0aS9hcGkvQW5ub3RhdGlvbjtMAAltb2RpZmllcnN0ABVMeHNidGkvYXBpL01vZGlmaWVycztMAARuYW1lcQB+AAx4cHNyABB4c2J0aS5hcGkuUHVibGljulg9rmwtYEICAAB4cgAQeHNidGkuYXBpLkFjY2Vzc91imvgdYzFIAgAAeHB1cgAXW0x4c2J0aS5hcGkuQW5ub3RhdGlvbjvrl+sZEPaNSAIAAHhwAAAAAHNyABN4c2J0aS5hcGkuTW9kaWZpZXJzxxETIWmc3CQCAAFCAAVmbGFnc3hwAXEAfgAzdXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAIQ2xhc3NEZWZ1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAACdAAnc2NhbGEucmVmbGVjdC5tYWNyb3MuaW50ZXJuYWwubWFjcm9JbXBsdAAQc2NhbGEuZGVwcmVjYXRlZHNyABN4c2J0aS5TYWZlTGF6eSRJbXBsUAIuk5eXQD8CAANaAAhiaXRtYXAkMEwAAl90dAASTGphdmEvbGFuZy9PYmplY3Q7TAAEZXZhbHQAEUxzY2FsYS9GdW5jdGlvbjA7eHIAFnhzYnRpLmFwaS5BYnN0cmFjdExhennTd7UBX7vnoAIAAHhwAHBzcgAgeHNidGkuU2FmZUxhenkkJGFub25mdW4kc3RyaWN0JDEAAAAAAAAAAAIAAUwAB3ZhbHVlJDFxAH4CPXhwc3IAE3hzYnRpLmFwaS5FbXB0eVR5cGW8/Z5GSTuJJAIAAHhyABR4c2J0aS5hcGkuU2ltcGxlVHlwZXJ4YoghI79AAgAAeHIADnhzYnRpLmFwaS5UeXBlP2rZIRZJqsoCAAB4cHNxAH4CPABwc3EAfgJBc3IAE3hzYnRpLmFwaS5TdHJ1Y3R1cmWpqvmAk2/YAAIAA0wACGRlY2xhcmVkcQB+AiNMAAlpbmhlcml0ZWRxAH4CI0wAB3BhcmVudHNxAH4CI3hxAH4CRXNxAH4CPABwc3EAfgJBdXEAfgIeAAAAAHNxAH4CPABwc3EAfgJBdXEAfgIeAAAAAHNxAH4CPABwc3EAfgJBdXIAEVtMeHNidGkuYXBpLlR5cGU7dP+lWnv56UECAAB4cAAAABlzcgAUeHNidGkuYXBpLlByb2plY3Rpb27z0o1U6UWkLQIAAkwAAmlkcQB+AAxMAAZwcmVmaXh0ABZMeHNidGkvYXBpL1NpbXBsZVR5cGU7eHEAfgJEdAAKSW5zcGVjdG9yc3NyABN4c2J0aS5hcGkuU2luZ2xldG9u/Kdf+M9W5EYCAAFMAARwYXRodAAQTHhzYnRpL2FwaS9QYXRoO3hxAH4CRHNyAA54c2J0aS5hcGkuUGF0aJs9XAjOpSeEAgABWwAKY29tcG9uZW50c3QAGltMeHNidGkvYXBpL1BhdGhDb21wb25lbnQ7eHB1cgAaW0x4c2J0aS5hcGkuUGF0aENvbXBvbmVudDtD2gl0LWcWdAIAAHhwAAAAA3NyAAx4c2J0aS5hcGkuSWSYMmyLN1PEQAIAAUwAAmlkcQB+AAx4cgAXeHNidGkuYXBpLlBhdGhDb21wb25lbnRfmiJbLoafvAIAAHhwdAADb3Jnc3EAfgJhdAAJc2NhbGF0ZXN0c3IADnhzYnRpLmFwaS5UaGlz2wntpsxaQFwCAAB4cQB+AmJzcQB+AlV0AAZJbnNpZGVxAH4CW3NxAH4CVXQADE9wdGlvblZhbHVlc3EAfgJbc3EAfgJVdAAITWF0Y2hlcnNxAH4CW3NxAH4CVXQACkV4cGxpY2l0bHlzcQB+AllzcQB+Alx1cQB+Al8AAAADc3EAfgJhdAADb3Jnc3EAfgJhdAAJc2NhbGFjdGljcQB+AmhzcQB+AlV0AAxNYXRjaGVyV29yZHNzcQB+AllzcQB+Alx1cQB+Al8AAAAEc3EAfgJhdAADb3Jnc3EAfgJhdAAJc2NhbGF0ZXN0c3EAfgJhdAAFd29yZHNxAH4CaHNxAH4CVXQACVRvbGVyYW5jZXEAfgJxc3EAfgJVdAAIRmxhdFNwZWNxAH4CW3NxAH4CVXQADEZsYXRTcGVjTGlrZXEAfgJbc3EAfgJVdAALRG9jdW1lbnRpbmdxAH4CW3NxAH4CVXQACEFsZXJ0aW5ncQB+AltzcQB+AlV0AAlOb3RpZnlpbmdxAH4CW3NxAH4CVXQACUluZm9ybWluZ3EAfgJbc3EAfgJVdAAHQ2FuVmVyYnEAfgJ6c3EAfgJVdAAITXVzdFZlcmJxAH4CenNxAH4CVXQAClNob3VsZFZlcmJxAH4CenNxAH4CVXQAEFRlc3RSZWdpc3RyYXRpb25xAH4CW3NxAH4CVXQABVN1aXRlcQB+AltzcQB+AlV0AAxTZXJpYWxpemFibGVzcQB+AllzcQB+Alx1cQB+Al8AAAADc3EAfgJhdAAEamF2YXNxAH4CYXQAAmlvcQB+AmhzcQB+AlV0AA1BYnN0cmFjdFN1aXRlcQB+AltzcQB+AlV0AApBc3NlcnRpb25zcQB+AltzcQB+AlV0AAxUcmlwbGVFcXVhbHNxAH4CcXNxAH4CVXQAE1RyaXBsZUVxdWFsc1N1cHBvcnRxAH4CcXNxAH4CVXQABk9iamVjdHNxAH4CWXNxAH4CXHVxAH4CXwAAAANzcQB+AmFxAH4CoXNxAH4CYXQABGxhbmdxAH4CaHNxAH4CVXQAA0FueXNxAH4CWXNxAH4CXHVxAH4CXwAAAAJzcQB+AmF0AAVzY2FsYXEAfgJodXIAFFtMeHNidGkuYXBpLlBhY2thZ2U7WxMZN3CnJ6ECAAB4cAAAAABzcgAVeHNidGkuYXBpLkNvbXBpbGF0aW9u7frgw2rooEICAAJKAAlzdGFydFRpbWVbAAdvdXRwdXRzdAAaW0x4c2J0aS9hcGkvT3V0cHV0U2V0dGluZzt4cAAAAVD+TplfdXIAGltMeHNidGkuYXBpLk91dHB1dFNldHRpbmc7f2rC86eHpUICAAB4cAAAAAFzcgAXeHNidGkuYXBpLk91dHB1dFNldHRpbmd62ZpHdPsdewIAAkwAD291dHB1dERpcmVjdG9yeXEAfgAMTAAPc291cmNlRGlyZWN0b3J5cQB+AAx4cHQAOS9ob21lL2hzL1NDL2RzYy9oZWxsby90YXJnZXQvc2NhbGEtMi4xMi4wLU0zL3Rlc3QtY2xhc3Nlc3QAAS91cgACW0Ks8xf4BghU4AIAAHhwAAAAFOmc8kp7oFYS7Al0OoWF4vtTx9wz
external apis:
0 items
source infos:
3 items
/home/hs/SC/dsc/hello/src/test/scala/ExampleSpec.scala -> 
AAAAAAAAAAA=
/home/hs/SC/dsc/hello/src/test/scala/StackSpec.scala -> 
AAAAAAAAAAA=
/home/hs/SC/dsc/hello/src/test/scala/UnitSpec.scala -> 
AAAAAAAAAAA=
compilations:
1 items
0 -> rO0ABXNyABV4c2J0aS5hcGkuQ29tcGlsYXRpb27t+uDDauigQgIAAkoACXN0YXJ0VGltZVsAB291dHB1dHN0ABpbTHhzYnRpL2FwaS9PdXRwdXRTZXR0aW5nO3hwAAABUP5OmV91cgAaW0x4c2J0aS5hcGkuT3V0cHV0U2V0dGluZzt/asLzp4elQgIAAHhwAAAAAXNyABd4c2J0aS5hcGkuT3V0cHV0U2V0dGluZ3rZmkd0+x17AgACTAAPb3V0cHV0RGlyZWN0b3J5dAASTGphdmEvbGFuZy9TdHJpbmc7TAAPc291cmNlRGlyZWN0b3J5cQB+AAZ4cHQAOS9ob21lL2hzL1NDL2RzYy9oZWxsby90YXJnZXQvc2NhbGEtMi4xMi4wLU0zL3Rlc3QtY2xhc3Nlc3QAAS8=
